-- null
DEPTH = 4096;
WIDTH = 32;

ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;

CONTENT
BEGIN
    -- nop
0000 : 00000000000000000000000000000000;
    -- addi $1, $0, 65535      	# r1 = 65535 = 0x0000FFFF
0001 : 00101000010000001111111111111111;
    -- bex 4				# should not jump
0002 : 10110000000000000000000000000100;
    -- sll $2, $1, 15			# r2 = r1 << 15 = 0x7FFF8000 = 2147450880(decimal)
0003 : 00000000100000100000011110010000;
    -- add $3, $2, $2			# r3 = r2 + r2 (Tests overflow add)
0004 : 00000000110001000010000000000000;
    -- bex 7				# jump to nop
0005 : 10110000000000000000000000000111;
    -- nop
0006 : 00000000000000000000000000000000;
    -- nop
0007 : 00000000000000000000000000000000;
    -- addi $3, $2, 65535		# r3 = r2 + 65535 (Tests overflow addi)
0008 : 00101000110001001111111111111111;
    -- addi $4, $0, 1			# r4 = 1
0009 : 00101001000000000000000000000001;
    -- add $6, $1, $4			# r6 = 65535 + 1 = 65536  (normal addition) (then how about overflow addition?)
0010 : 00000001100000100100000000000000;
    -- sll $7, $4, 31			# r7 = r4 << 31 = 0x80000000(hex) = -2147483648(decimal)
0011 : 00000001110010000000111110010000;
    -- sub $9, $7, $6			# r9 = r7 - r6 (Tests overflow sub)
0012 : 00000010010011100110000000000100;
    -- setx 0
0013 : 10101000000000000000000000000000;
    -- bex 2				# should not jump
0014 : 10110000000000000000000000000010;
    -- and $10, $1, $2			# r10 = r1 & r2 = 0x0000FFFF & 0x7FFF8000 = 0x00008000(hex) = 32768(decimal)
0015 : 00000010100000100010000000001000;
    -- or $12, $1, $2			# r12 = r1 | r2 = 0x0000FFFF | 0x7FFF8000 = 0x7FFFFFFF(hex) = 2147483647(decimal)
0016 : 00000011000000100010000000001100;
    -- j 20			# jump to add (insn 20)
0017 : 00001000000000000000000000010100;
    -- nop
0018 : 00000000000000000000000000000000;
    -- nop
0019 : 00000000000000000000000000000000;
    -- nop
0020 : 00000000000000000000000000000000;
    -- addi $20, $0, 2         # r20 = 2
0021 : 00101101000000000000000000000010;
    -- add $21, $4, $20        # r21 = 3
0022 : 00000101010010010100000000000000;
    -- sub $22, $20, $4        # r22 = 1
0023 : 00000101101010000100000000000100;
    -- bne $21, $22, 3		# branch to or 
0024 : 00010101011011000000000000000011;
    -- nop
0025 : 00000000000000000000000000000000;
    -- nop		
0026 : 00000000000000000000000000000000;
    -- and $23, $22, $21       # r23 = 1 & 3 = 1
0027 : 00000101111011010101000000001000;
    -- or $24, $20, $23        # r24 = 2 | 1 = 3
0028 : 00000110001010010111000000001100;
    -- jal 32			# jump to addi (insn 32)
0029 : 00011000000000000000000000100000;
    -- sll $25, $23, 1          # r25 = 1 << 1 = 2
0030 : 00000110011011100000000010010000;
    -- sra $26, $25, 1          # r26 = 2 >> 1 = 1 
0031 : 00000110101100100000000010010100;
    -- addi $20, $0, 2         # r20 = 2
0032 : 00101101000000000000000000000010;
    -- and $23, $22, $21       # r23 = 1 & 3 = 1
0033 : 00000101111011010101000000001000;
    -- addi $27, $0, 36	# r27 = 36
0034 : 00101110110000000000000000100100;
    -- jr $27			# jr (insn 36)
0035 : 00100110110000000000000000000000;
    -- nop
0036 : 00000000000000000000000000000000;
    -- addi $20, $0, 2         # r20 = 2
0037 : 00101101000000000000000000000010;
    -- blt $20, $21, 2
0038 : 00110101001010100000000000000010;
    -- nop
0039 : 00000000000000000000000000000000;
    -- nop
0040 : 00000000000000000000000000000000;
    -- add $21, $4, $20
0041 : 00000101010010010100000000000000;
[0042 .. 4095] : 00000000000000000000000000000000;
END;
